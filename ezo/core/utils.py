import json
from eth_account import Account
from xkcdpass import xkcd_password as xp
from core.helpers import red, cyan, yellow


def create_ethereum_account():
    ac = Account.create()
    wf = xp.locate_wordfile()
    words= xp.generate_wordlist(wordfile=wf, min_length=5, max_length=8)

    password_str = xp.generate_xkcdpassword(words)
    print(cyan("password string to decrypt private key -- please store in safe location:"))
    print()
    print(yellow(password_str))
    print()
    print(cyan("address:"))
    print(yellow(ac.address))

    ks = json.dumps(Account.encrypt(ac.privateKey, password_str), indent=2)
    print(red(ks))


def gen_event_handler_code():

    template = '''
# This code automatically generated by ezo.  Only modify where suggested.
#
# data is an instance of ContractEvent
# contract is the calling instance of Contract - it is used to send a response

def handler(data, contract):
    
    ### remove this comment and the two print statements below 
    
    print("contract: {}".format(contract.name))
    print("    data: {}".format(data.__dict__))
   
    ### put your code here
    
    
    
    ### uncomment the code below to build a response object
    # response = dict()
    # response["address"] = data.address  # <<< the contract's address from the data 
    # response["function"] = None         # <<< replace None with the Contract function that will be called
    # response["params'] = None           # <<< replace None with a list of your function's data parameters
     
    ### uncomment the code below to send a response to the contract function
    # _, err = contract.response(response)
    # if err:
    #     return None, err
   
    return None, None
    '''
    return template